{"version":3,"sources":["services/RobotService.js","cmps/RobotPreview.jsx","cmps/RobotList.jsx","cmps/RobotFilter.jsx","pages/RobotPage.jsx","pages/About.jsx","pages/RobotDetails.jsx","cmps/NavBar/NavBar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["gId","robots","map","name","getEmptyRobot","_id","makeId","sort","arr","a","b","toLocaleLowerCase","giftsCount","RobotService","getRobots","filterBy","Promise","resolve","reject","robotsToReturn","term","filter","robot","includes","getRobotById","id","console","log","find","JSON","parse","stringify","deleteRobot","index","findIndex","splice","saveRobot","c","_updateRobot","push","_addRobot","length","txt","possible","i","charAt","Math","floor","random","key","props","className","to","RobotPreview","RobotFilter","state","onChangeHandler","ev","target","value","setState","onFilter","type","placeholder","onChange","this","Component","RobotPage","color","isActive","loadRobots","onFilterHandler","prevState","RobotList","RobotDetails","onSendGiftClickHandler","updatedRobot","onGoBackClickHandler","history","go","match","params","prevProps","onClick","repeat","style","height","src","alt","activeClassName","exact","createBrowserHistory","App","path","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f842e554.chunk.js","sourcesContent":["let gId = 0\r\n\r\n\r\nconst robots = ['Bubili', 'Shampudo', 'Grulif', 'Shtifas', 'Flidar', 'Bamkid', 'Izmerulu', 'Shilk']\r\n  .map(name => ({ ...getEmptyRobot(), _id: makeId(), name }))\r\n\r\nfunction sort(arr) {\r\n  return arr.sort((a, b) => {\r\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\r\n      return -1\r\n    }\r\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\r\n      return 1\r\n    }\r\n\r\n    return 0\r\n  })\r\n}\r\n\r\nfunction getRobots(filterBy = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    var robotsToReturn = robots\r\n    const { term } = filterBy\r\n    if (term) {\r\n      robotsToReturn = robots.filter(robot => {\r\n        return robot.name.toLocaleLowerCase().includes(term)\r\n      })\r\n    }\r\n    resolve(sort(robotsToReturn))\r\n  })\r\n}\r\n\r\nfunction getRobotById(id) {\r\n  console.log('robots', robots);\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    const robot = robots.find(robot => robot._id === id)\r\n    robot ? resolve(JSON.parse(JSON.stringify(robot))) : reject(`Robot id ${id} not found!`)\r\n  })\r\n}\r\n\r\nfunction deleteRobot(id) {\r\n  return new Promise((resolve, reject) => {\r\n    const index = robots.findIndex(robot => robot._id === id)\r\n    if (index !== -1) {\r\n      robots.splice(index, 1)\r\n    }\r\n\r\n    resolve()\r\n  })\r\n}\r\n\r\nfunction _updateRobot(robot) {\r\n  return new Promise((resolve, reject) => {\r\n    const index = robots.findIndex(c => robot._id === c._id)\r\n    if (index !== -1) {\r\n      robots[index] = robot\r\n    }\r\n\r\n    resolve(robot)\r\n  })\r\n}\r\n\r\nfunction _addRobot(robot) {\r\n  return new Promise((resolve, reject) => {\r\n    robot._id = makeId()\r\n    robots.push(robot)\r\n    resolve(robot)\r\n  })\r\n}\r\n\r\nfunction saveRobot(robot) {\r\n  return robot._id ? _updateRobot(robot) : _addRobot(robot)\r\n}\r\n\r\nfunction getEmptyRobot() {\r\n  return {\r\n    _id: gId++,\r\n    name: '',\r\n    giftsCount: 0\r\n  }\r\n}\r\n\r\nexport const RobotService = {\r\n  getRobots,\r\n  getRobotById,\r\n  deleteRobot,\r\n  saveRobot,\r\n  getEmptyRobot\r\n}\r\n\r\n\r\n\r\nfunction makeId(length = 10) {\r\n  var txt = ''\r\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n  for (var i = 0; i < length; i++) {\r\n    txt += possible.charAt(Math.floor(Math.random() * possible.length))\r\n  }\r\n  return txt\r\n}","import React from 'react';\r\n\r\n// '🎁'\r\nexport default ({ robot }) => {\r\n  return (\r\n    <div key={robot._id}>\r\n      {robot.name}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport RobotPreview from './RobotPreview';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"RobotList\">\r\n      {props.robots.map((robot) => (\r\n        <Link to={'/robot/' + robot._id} key={robot._id}>\r\n          <RobotPreview robot={robot} />\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class RobotFilter extends Component {\r\n  state = {\r\n    term: '',\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ...props.filterBy };\r\n    // CANT setState IN ctor\r\n    // this.setState({ ...props.filterBy });\r\n  }\r\n\r\n  onChangeHandler = (ev) => {\r\n    const { value, name } = ev.target;\r\n    this.setState({ [name]: value }, () => {\r\n      this.props.onFilter({ ...this.state });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Robot Name\"\r\n          onChange={this.onChangeHandler}\r\n          name=\"term\"\r\n          value={this.state.term}\r\n        />\r\n        {/* <input\r\n          type=\"color\"\r\n          placeholder=\"Robot Name\"\r\n          onChange={this.onChangeHandler}\r\n          value={this.state.filterBy.color}\r\n          name=\"color\"\r\n        /> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { RobotService } from '../services/RobotService';\r\n\r\nimport RobotList from '../cmps/RobotList';\r\nimport RobotFilter from '../cmps/RobotFilter';\r\n\r\nexport default class RobotPage extends Component {\r\n  state = {\r\n    robots: [],\r\n    filterBy: {\r\n      term: '',\r\n      color: '',\r\n      isActive: false,\r\n    },\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.loadRobots();\r\n  }\r\n\r\n  loadRobots = async () => {\r\n    const robots = await RobotService.getRobots(this.state.filterBy);\r\n    this.setState({ robots: robots });\r\n  };\r\n\r\n  onFilterHandler = (filterBy) => {\r\n    console.log('hi', filterBy);\r\n    this.setState((prevState) => {\r\n      return {\r\n        filterBy: {\r\n          ...prevState.filterBy,\r\n          ...filterBy,\r\n        },\r\n      };\r\n    }, this.loadRobots);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <RobotFilter\r\n          filterBy={this.state.filterBy}\r\n          onFilter={this.onFilterHandler}\r\n        />\r\n        ROBOTS SHOULD BE HERE\r\n        <RobotList robots={this.state.robots} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nexport default (props) => {\r\n  console.log(\"about's props\", props);\r\n\r\n  return (\r\n    <div>\r\n      <h2>ABOUT US</h2>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport { RobotService } from '../services/RobotService';\r\n\r\nexport default class RobotDetails extends Component {\r\n  state = {\r\n    robot: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const id = this.props.match.params.id;\r\n    const robot = await RobotService.getRobotById(id);\r\n    this.setState({ robot });\r\n  }\r\n\r\n  onSendGiftClickHandler = async (ev) => {\r\n    // update robot\r\n    const robot = { ...this.state.robot };\r\n    robot.giftsCount++;\r\n    const updatedRobot = await RobotService.saveRobot(robot);\r\n    this.setState({ robot: updatedRobot });\r\n  };\r\n\r\n  onGoBackClickHandler = (ev) => {\r\n    this.props.history.go(-1);\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // for handling changes without componentDidMount\r\n  }\r\n\r\n  render() {\r\n    const { robot } = this.state;\r\n\r\n    if (!robot) {\r\n      return <div>Loading! :) </div>;\r\n    }\r\n\r\n    // FOR EXAMPLE\r\n    const imgStyle = {\r\n      height: '100px',\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={this.onGoBackClickHandler}>Go Back</button>\r\n        <h1>{robot.name}</h1>\r\n        <div>{'🎁'.repeat(robot.giftsCount)}</div>\r\n        <button onClick={this.onSendGiftClickHandler}>Send 🎁</button>\r\n        <img\r\n          style={imgStyle}\r\n          src={`https://robohash.org/${robot.name}.png`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './NavBar.css'\r\n\r\nexport default (props) => {\r\n  return (\r\n    <nav className=\"NavBar\">\r\n      <NavLink activeClassName=\"active\" exact to=\"/\">HOME</NavLink> \r\n      | <NavLink to=\"/about\">ABOUT</NavLink>\r\n    </nav>\r\n  );\r\n};\r\n","import React from 'react';\nimport { createBrowserHistory } from 'history';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nimport RobotPage from './pages/RobotPage';\nimport About from './pages/About';\nimport RobotDetails from './pages/RobotDetails';\n\nimport NavBar from './cmps/NavBar/NavBar';\n\nconst history = createBrowserHistory();\n\nfunction App(props) {\n  console.log(\"app's props:\", props);\n  return (\n    <div className=\"App\">\n      <h1>Mr.Robot</h1>\n      <Router history={history}>\n        <NavBar />\n        <main>\n          <Switch>\n            <Route path=\"/\" exact component={RobotPage} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/robot/:id\" component={RobotDetails} />\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}